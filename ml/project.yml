title: "SpanCategorizer for recognizing mineral colors in mindat notes"
description: "The SpanCategorizer is a component in **spaCy v3.1+** for assigning labels to contiguous spans of text
              proposed by a customizable suggester function. Unlike spaCy's EntityRecognizer component,
              the SpanCategorizer can recognize nested or overlapping spans.
              It also doesn't rely as heavily on consistent starting and ending words, so it may be a better fit for
              non-NER span labelling tasks. You do have to write a function that proposes your candidate spans, however.
              If your spans are often short, you could propose all spans under a certain size. You could also use syntactic
              constituents such as noun phrases or noun chunks, or matcher rules."
spacy_version: ">=3.1.0,<4.0.0"

vars:
  name: "colorExtractor"
  version: "0.0.1"
  config: "config"
  lang: "en"
  gpu: -1
  train: "color_train"
  dev: "color_dev"


directories: ["assets", "configs", "corpus", "metrics", "packages", "training", "scripts"]

assets:
  - dest: "assets/${vars.train}.json"
    description: "Training data with tagged COLOR and PRIMARY_COLOR spans"
  - dest: "assets/${vars.dev}.json"
    description: "Development data with tagged COLOR and PRIMARY_COLOR spans"

workflows:
  all:
    - preprocess
    - train
    - evaluate
    - package
    - clean

commands:
  - name: preprocess
    help: "Prepare jsonl train and dev data from raw data and save to spacy format"
    script:
      - "python ./scripts/preprocess.py ./assets/${vars.train}.json ./assets/${vars.train}.jsonl"
      - "python ./scripts/preprocess.py ./assets/${vars.dev}.json ./assets/${vars.dev}.jsonl"
      - "python ./scripts/corpus.py ./assets/${vars.train}.jsonl ./corpus/${vars.train}.spacy"
      - "python ./scripts/corpus.py ./assets/${vars.dev}.jsonl ./corpus/${vars.dev}.spacy"
    deps:
      - "./assets/${vars.train}.json"
      - "./assets/${vars.dev}.json"
      - "./scripts/corpus.py"
      - "./scripts/preprocess.py"
    outputs:
      - "./assets/${vars.train}.jsonl"
      - "./assets/${vars.dev}.jsonl"
      - "./corpus/${vars.train}.spacy"
      - "./corpus/${vars.dev}.spacy"

  - name: train
    help: "Train the pipeline"
    script:
      - "python -m spacy train ./configs/${vars.config}.cfg -o ./training/ --gpu-id ${vars.gpu} --paths.train ./corpus/${vars.train}.spacy --paths.dev ./corpus/${vars.dev}.spacy"
    deps:
      - "./corpus/${vars.train}.spacy"
      - "./corpus/${vars.dev}.spacy"
      - "./configs/${vars.config}.cfg"
    outputs:
      - "training/model-best"

  - name: evaluate
    help: "Evaluate on the test data and save the metrics"
    script:
      - "python -m spacy evaluate ./training/model-best ./corpus/${vars.dev}.spacy --output ./training/${vars.name}-${vars.version}.json"
    deps:
      - "./training/model-best"
      - "./corpus/${vars.dev}.spacy"
    outputs:
      - "./metrics/${vars.name}-${vars.version}.json"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package ./training/model-best packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "./training/model-best"
    outputs_no_cache:
      - "./packages/en_${vars.name}-${vars.version}/dist/en_${vars.name}-${vars.version}.tar.gz"

  - name: clean
    help: "Remove intermediate files"
    script:
      - "rm -rf ./training/*"
      - "rm -rf ./metrics/*"
      - "rm -rf ./corpus/*"
